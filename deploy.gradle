apply plugin: "maven-publish"
apply plugin: "signing"

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
}

apply plugin: "org.jetbrains.dokka"

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId shippedshieldGroupId
                artifactId shippedshieldArtifactId
                version libraryVersion

                artifact androidSourcesJar
                artifact javadocJar
                artifact bundleReleaseAar

                pom {
                    name = shippedshieldName
                    description = shippedshieldDescription
                    url = shippedshieldUrl
                    licenses {
                        license {
                            name = shippedshieldLicenseName
                            url = shippedshieldLicenseUrl
                        }
                    }
                    organization {
                        name = shippedshieldOrganizationName
                        url = shippedshieldOrganizationUrl
                    }
                    developers {
                        developer {
                            organization = shippedshieldOrganizationName
                            organizationUrl = shippedshieldOrganizationUrl
                        }
                    }
                    scm {
                        connection = shippedshieldScmConnection
                        developerConnection = shippedshieldScmConnection
                        url = shippedshieldScmUrl
                    }
                }

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.api.dependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group != rootProject.name ? it.group : shippedshieldGroupId)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version != 'unspecified' ? it.version : libraryVersion)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                    configurations.implementation.dependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }
}